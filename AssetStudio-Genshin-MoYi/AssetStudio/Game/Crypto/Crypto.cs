using System;

namespace AssetStudio
{
    public static class Crypto
    {
        private static readonly byte[] GF256Exp = new byte[] { 0x01, 0x03, 0x05, 0x0F, 0x11, 0x33, 0x55, 0xFF, 0x1A, 0x2E, 0x72, 0x96, 0xA1, 0xF8, 0x13, 0x35, 0x5F, 0xE1, 0x38, 0x48, 0xD8, 0x73, 0x95, 0xA4, 0xF7, 0x02, 0x06, 0x0A, 0x1E, 0x22, 0x66, 0xAA, 0xE5, 0x34, 0x5C, 0xE4, 0x37, 0x59, 0xEB, 0x26, 0x6A, 0xBE, 0xD9, 0x70, 0x90, 0xAB, 0xE6, 0x31, 0x53, 0xF5, 0x04, 0x0C, 0x14, 0x3C, 0x44, 0xCC, 0x4F, 0xD1, 0x68, 0xB8, 0xD3, 0x6E, 0xB2, 0xCD, 0x4C, 0xD4, 0x67, 0xA9, 0xE0, 0x3B, 0x4D, 0xD7, 0x62, 0xA6, 0xF1, 0x08, 0x18, 0x28, 0x78, 0x88, 0x83, 0x9E, 0xB9, 0xD0, 0x6B, 0xBD, 0xDC, 0x7F, 0x81, 0x98, 0xB3, 0xCE, 0x49, 0xDB, 0x76, 0x9A, 0xB5, 0xC4, 0x57, 0xF9, 0x10, 0x30, 0x50, 0xF0, 0x0B, 0x1D, 0x27, 0x69, 0xBB, 0xD6, 0x61, 0xA3, 0xFE, 0x19, 0x2B, 0x7D, 0x87, 0x92, 0xAD, 0xEC, 0x2F, 0x71, 0x93, 0xAE, 0xE9, 0x20, 0x60, 0xA0, 0xFB, 0x16, 0x3A, 0x4E, 0xD2, 0x6D, 0xB7, 0xC2, 0x5D, 0xE7, 0x32, 0x56, 0xFA, 0x15, 0x3F, 0x41, 0xC3, 0x5E, 0xE2, 0x3D, 0x47, 0xC9, 0x40, 0xC0, 0x5B, 0xED, 0x2C, 0x74, 0x9C, 0xBF, 0xDA, 0x75, 0x9F, 0xBA, 0xD5, 0x64, 0xAC, 0xEF, 0x2A, 0x7E, 0x82, 0x9D, 0xBC, 0xDF, 0x7A, 0x8E, 0x89, 0x80, 0x9B, 0xB6, 0xC1, 0x58, 0xE8, 0x23, 0x65, 0xAF, 0xEA, 0x25, 0x6F, 0xB1, 0xC8, 0x43, 0xC5, 0x54, 0xFC, 0x1F, 0x21, 0x63, 0xA5, 0xF4, 0x07, 0x09, 0x1B, 0x2D, 0x77, 0x99, 0xB0, 0xCB, 0x46, 0xCA, 0x45, 0xCF, 0x4A, 0xDE, 0x79, 0x8B, 0x86, 0x91, 0xA8, 0xE3, 0x3E, 0x42, 0xC6, 0x51, 0xF3, 0x0E, 0x12, 0x36, 0x5A, 0xEE, 0x29, 0x7B, 0x8D, 0x8C, 0x8F, 0x8A, 0x85, 0x94, 0xA7, 0xF2, 0x0D, 0x17, 0x39, 0x4B, 0xDD, 0x7C, 0x84, 0x97, 0xA2, 0xFD, 0x1C, 0x24, 0x6C, 0xB4, 0xC7, 0x52, 0xF6, 0x01 };
        private static readonly byte[] GF256Log = new byte[] { 0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1A, 0xC6, 0x4B, 0xC7, 0x1B, 0x68, 0x33, 0xEE, 0xDF, 0x03, 0x64, 0x04, 0xE0, 0x0E, 0x34, 0x8D, 0x81, 0xEF, 0x4C, 0x71, 0x08, 0xC8, 0xF8, 0x69, 0x1C, 0xC1, 0x7D, 0xC2, 0x1D, 0xB5, 0xF9, 0xB9, 0x27, 0x6A, 0x4D, 0xE4, 0xA6, 0x72, 0x9A, 0xC9, 0x09, 0x78, 0x65, 0x2F, 0x8A, 0x05, 0x21, 0x0F, 0xE1, 0x24, 0x12, 0xF0, 0x82, 0x45, 0x35, 0x93, 0xDA, 0x8E, 0x96, 0x8F, 0xDB, 0xBD, 0x36, 0xD0, 0xCE, 0x94, 0x13, 0x5C, 0xD2, 0xF1, 0x40, 0x46, 0x83, 0x38, 0x66, 0xDD, 0xFD, 0x30, 0xBF, 0x06, 0x8B, 0x62, 0xB3, 0x25, 0xE2, 0x98, 0x22, 0x88, 0x91, 0x10, 0x7E, 0x6E, 0x48, 0xC3, 0xA3, 0xB6, 0x1E, 0x42, 0x3A, 0x6B, 0x28, 0x54, 0xFA, 0x85, 0x3D, 0xBA, 0x2B, 0x79, 0x0A, 0x15, 0x9B, 0x9F, 0x5E, 0xCA, 0x4E, 0xD4, 0xAC, 0xE5, 0xF3, 0x73, 0xA7, 0x57, 0xAF, 0x58, 0xA8, 0x50, 0xF4, 0xEA, 0xD6, 0x74, 0x4F, 0xAE, 0xE9, 0xD5, 0xE7, 0xE6, 0xAD, 0xE8, 0x2C, 0xD7, 0x75, 0x7A, 0xEB, 0x16, 0x0B, 0xF5, 0x59, 0xCB, 0x5F, 0xB0, 0x9C, 0xA9, 0x51, 0xA0, 0x7F, 0x0C, 0xF6, 0x6F, 0x17, 0xC4, 0x49, 0xEC, 0xD8, 0x43, 0x1F, 0x2D, 0xA4, 0x76, 0x7B, 0xB7, 0xCC, 0xBB, 0x3E, 0x5A, 0xFB, 0x60, 0xB1, 0x86, 0x3B, 0x52, 0xA1, 0x6C, 0xAA, 0x55, 0x29, 0x9D, 0x97, 0xB2, 0x87, 0x90, 0x61, 0xBE, 0xDC, 0xFC, 0xBC, 0x95, 0xCF, 0xCD, 0x37, 0x3F, 0x5B, 0xD1, 0x53, 0x39, 0x84, 0x3C, 0x41, 0xA2, 0x6D, 0x47, 0x14, 0x2A, 0x9E, 0x5D, 0x56, 0xF2, 0xD3, 0xAB, 0x44, 0x11, 0x92, 0xD9, 0x23, 0x20, 0x2E, 0x89, 0xB4, 0x7C, 0xB8, 0x26, 0x77, 0x99, 0xE3, 0xA5, 0x67, 0x4A, 0xED, 0xDE, 0xC5, 0x31, 0xFE, 0x18, 0x0D, 0x63, 0x8C, 0x80, 0xC0, 0xF7, 0x70, 0x07 };
        
        private static readonly byte[] Mhy0ShiftRow = new byte[] { 0x0B, 0x02, 0x08, 0x0C, 0x01, 0x05, 0x00, 0x0F, 0x06, 0x07, 0x09, 0x03, 0x0D, 0x04, 0x0E, 0x0A, 0x04, 0x05, 0x07, 0x0A, 0x02, 0x0F, 0x0B, 0x08, 0x0E, 0x0D, 0x09, 0x06, 0x0C, 0x03, 0x00, 0x01, 0x08, 0x00, 0x0C, 0x06, 0x04, 0x0B, 0x07, 0x09, 0x05, 0x03, 0x0F, 0x01, 0x0D, 0x0A, 0x02, 0x0E };
        private static readonly byte[] Mhy0Key = new byte[] { 0x48, 0x14, 0x36, 0xED, 0x8E, 0x44, 0x5B, 0xB6 };
        private static readonly byte[] Mhy0Mul = new byte[] { 0xA7, 0x99, 0x66, 0x50, 0xB9, 0x2D, 0xF0, 0x78 };

        public static readonly byte[] GISBox = new byte[] { 0xF7, 0xE7, 0xD8, 0xB8, 0x64, 0x31, 0xD1, 0x74, 0x88, 0xAA, 0xB4, 0x8B, 0x6A, 0xA3, 0xFC, 0x55, 0x59, 0xC5, 0x6D, 0xC9, 0x9A, 0x11, 0x2F, 0x37, 0xAD, 0x35, 0x15, 0x62, 0x61, 0x04, 0x44, 0x01, 0xDD, 0x47, 0x3D, 0xFF, 0x8F, 0x51, 0xAF, 0x0F, 0x19, 0x23, 0x92, 0x13, 0x00, 0x53, 0x4B, 0x67, 0x21, 0x1C, 0x1B, 0x94, 0xE2, 0x29, 0x9F, 0x4C, 0xFB, 0xBB, 0x75, 0xF0, 0xFE, 0x1F, 0xDB, 0xEF, 0x1D, 0xF1, 0x3A, 0x1A, 0x05, 0x06, 0xCE, 0xDE, 0x63, 0x0A, 0x6B, 0x2D, 0x28, 0x41, 0x6C, 0x0C, 0x42, 0xDC, 0x58, 0xB6, 0x39, 0x2E, 0xD2, 0xF6, 0x2B, 0xAC, 0x84, 0x96, 0x17, 0xF3, 0x3F, 0x8D, 0xAB, 0x95, 0xCD, 0x30, 0x0E, 0x66, 0x90, 0xF4, 0xED, 0xE0, 0x8E, 0xC2, 0x78, 0x2C, 0x7E, 0xF8, 0x5D, 0x02, 0x91, 0xFA, 0x3C, 0xDA, 0xB7, 0x6F, 0xF9, 0x4F, 0x14, 0x5E, 0xEA, 0x24, 0x56, 0x9E, 0xC1, 0xA5, 0x85, 0xD7, 0x08, 0x83, 0x4E, 0xF5, 0x76, 0x32, 0x86, 0x5C, 0xD3, 0x09, 0x5F, 0xFD, 0x36, 0x03, 0xEE, 0xE3, 0x34, 0x77, 0x79, 0x18, 0xBD, 0xDF, 0x97, 0x71, 0xBA, 0x65, 0x68, 0x7A, 0x54, 0x80, 0x48, 0x38, 0x5B, 0x4D, 0x5A, 0x7F, 0x0B, 0x7C, 0xA6, 0x7B, 0x25, 0xD6, 0x0D, 0x40, 0xD0, 0x07, 0x99, 0x9D, 0x93, 0x69, 0xD9, 0x8C, 0xB3, 0xB5, 0xA4, 0x1E, 0xCB, 0x33, 0x82, 0xE9, 0xC3, 0x60, 0xA7, 0xAE, 0x45, 0xBE, 0xB1, 0x46, 0xB2, 0x9C, 0x22, 0xC7, 0x81, 0x98, 0xA9, 0xD5, 0x6E, 0xE1, 0x10, 0xCA, 0xBC, 0x4A, 0x70, 0xD4, 0xC4, 0x72, 0x12, 0xCF, 0x2A, 0x87, 0x16, 0xC8, 0x73, 0xA1, 0x3E, 0x52, 0x50, 0xA8, 0x57, 0x27, 0xEC, 0xCC, 0x7D, 0xE4, 0xA0, 0x89, 0xBF, 0xE5, 0x8A, 0x20, 0xEB, 0xC0, 0xA2, 0x49, 0xB9, 0xE8, 0x26, 0xC6, 0xE6, 0xB0, 0x3B, 0x9B, 0xF2, 0x43, 0x5E, 0xB0, 0xE6, 0x0D, 0xF9, 0x87, 0xD7, 0x8A, 0xDF, 0xE7, 0x19, 0x99, 0x6F, 0xD5, 0x5B, 0x4E, 0xCB, 0xC2, 0x48, 0xD2, 0xF2, 0x44, 0x35, 0x03, 0xE9, 0x86, 0xD0, 0x95, 0x02, 0x4A, 0x04, 0x62, 0xC5, 0x9D, 0x1D, 0xE2, 0xFD, 0x53, 0x08, 0x8D, 0x5D, 0x75, 0xD9, 0x3F, 0x94, 0x59, 0x14, 0x29, 0x98, 0x76, 0x8C, 0x79, 0x2E, 0x8F, 0x39, 0x0C, 0x4C, 0xC8, 0xC0, 0x81, 0x9C, 0x10, 0xBB, 0xAF, 0xF7, 0xE5, 0xB2, 0xB3, 0xEE, 0x56, 0x57, 0xB8, 0xFA, 0x40, 0x7A, 0x72, 0x77, 0x24, 0x6C, 0xC6, 0x47, 0x3A, 0x74, 0xCF, 0x89, 0xB4, 0x9B, 0x26, 0xAA, 0x38, 0x09, 0xC3, 0x1C, 0xDE, 0x9F, 0xDD, 0x16, 0x1F, 0x55, 0xBD, 0xAD, 0xAC, 0x80, 0x4F, 0x64, 0x4B, 0x71, 0xB7, 0xF6, 0x06, 0x2B, 0xC7, 0x01, 0xEA, 0x46, 0xA6, 0xEB, 0x3D, 0xCA, 0x07, 0x34, 0x1B, 0xFF, 0x7C, 0x7D, 0x2D, 0x37, 0x67, 0x60, 0x9A, 0xC4, 0x97, 0x7F, 0xD6, 0xBE, 0xAE, 0x85, 0x25, 0x88, 0x65, 0xA2, 0x00, 0xB6, 0x8E, 0xD4, 0x6E, 0x1A, 0x63, 0x36, 0x92, 0xC1, 0xE1, 0x15, 0xA5, 0x58, 0x3B, 0x7E, 0x22, 0x2F, 0x84, 0x0F, 0x5C, 0x96, 0xB1, 0xF1, 0x6D, 0x8B, 0xF4, 0xA8, 0xB5, 0x0B, 0xFE, 0x23, 0xE3, 0xCE, 0xF8, 0xF5, 0x51, 0x45, 0x43, 0x18, 0x1E, 0xD1, 0xBA, 0xBC, 0x90, 0x21, 0x70, 0x30, 0xC9, 0x2A, 0xEC, 0x61, 0x7B, 0x66, 0x5F, 0x13, 0x33, 0x20, 0x6B, 0xCD, 0x3C, 0xA0, 0x93, 0x31, 0xB9, 0x05, 0x82, 0xFB, 0x3E, 0x17, 0x12, 0x6A, 0x0A, 0xCC, 0x4D, 0xA1, 0x73, 0x52, 0x78, 0xBF, 0x28, 0x50, 0x69, 0xDC, 0x68, 0x42, 0xE0, 0xA4, 0x2C, 0xEF, 0xF0, 0x11, 0xE8, 0x91, 0x49, 0x83, 0x5A, 0xF3, 0x32, 0xDB, 0xAB, 0xDA, 0x27, 0x0E, 0xED, 0xA3, 0xFC, 0x41, 0xA7, 0xA9, 0xD3, 0x9E, 0xE4, 0xD8, 0x54, 0x95, 0xAE, 0xF0, 0xD5, 0x73, 0x24, 0xD2, 0xA5, 0x99, 0x0B, 0x1B, 0xC4, 0x9A, 0xD8, 0x69, 0x6F, 0x25, 0xED, 0x8E, 0x91, 0x63, 0xF8, 0x35, 0x62, 0x5B, 0x94, 0x88, 0xB2, 0x5C, 0x0F, 0xDD, 0xA4, 0x7A, 0x1A, 0x12, 0xC6, 0x37, 0x44, 0xF1, 0x4E, 0xB9, 0x4D, 0x43, 0xD1, 0xAD, 0xEB, 0xB4, 0x46, 0x80, 0x30, 0x5E, 0xE4, 0x87, 0x6E, 0x0A, 0x82, 0xCF, 0x74, 0x38, 0xB5, 0xC1, 0xD6, 0x01, 0x05, 0xE8, 0x83, 0xA9, 0x6D, 0xCE, 0xA8, 0xC5, 0x51, 0xA3, 0x3F, 0xDA, 0x03, 0xD0, 0x3A, 0x39, 0x6C, 0x11, 0x97, 0x68, 0x54, 0xC0, 0x4B, 0xDF, 0x19, 0x0C, 0x21, 0x1F, 0x66, 0xBD, 0xE9, 0x61, 0x49, 0xC8, 0x42, 0xBC, 0xEC, 0x7F, 0xC3, 0x4F, 0x2E, 0xA1, 0x58, 0x3D, 0x81, 0xE3, 0x14, 0xB8, 0x02, 0x23, 0x9E, 0x77, 0x2B, 0x33, 0xA6, 0x93, 0x13, 0x34, 0x0E, 0x06, 0x45, 0xFB, 0x07, 0x75, 0x0D, 0x1E, 0x40, 0xAB, 0x7D, 0xF5, 0xBB, 0x55, 0xEF, 0x04, 0x65, 0x79, 0x2F, 0xCA, 0xF3, 0x29, 0xCB, 0xEA, 0x17, 0xF4, 0xE6, 0x71, 0x4C, 0x50, 0x26, 0xD9, 0x78, 0x5F, 0x09, 0x9C, 0x1C, 0x85, 0x31, 0x22, 0x9B, 0xC9, 0xE0, 0x8F, 0xAC, 0x57, 0x8B, 0x7C, 0x47, 0x7E, 0x16, 0xF7, 0x08, 0x5A, 0x59, 0x1D, 0xC7, 0xF9, 0x00, 0x2D, 0x60, 0x3C, 0x9F, 0x96, 0xA2, 0xBA, 0x20, 0x70, 0xF6, 0x48, 0xB0, 0x2C, 0x72, 0xE1, 0x64, 0xE7, 0xFF, 0xB7, 0x56, 0xA7, 0x53, 0x84, 0xD7, 0xE2, 0xD4, 0xA0, 0xB1, 0x8C, 0xE5, 0x2A, 0xDC, 0x15, 0x28, 0x5D, 0x3B, 0x36, 0x7B, 0x86, 0x6A, 0xDB, 0x10, 0xBE, 0x6B, 0xFE, 0x9D, 0x18, 0xDE, 0x76, 0xF2, 0xCD, 0xB6, 0x32, 0xFC, 0x41, 0xAF, 0xBF, 0x67, 0xB3, 0xAA, 0xC2, 0x8A, 0xFD, 0x89, 0xCC, 0xFA, 0x90, 0x98, 0x8D, 0x52, 0xD3, 0xEE, 0x92, 0x3E, 0x4A, 0x27, 0x2A, 0xD7, 0x9E, 0x02, 0x53, 0x63, 0xEA, 0xE9, 0x8F, 0x35, 0x22, 0x7F, 0xFE, 0xCA, 0x75, 0x46, 0x57, 0x94, 0xD9, 0x4E, 0xD2, 0xD4, 0x76, 0xA1, 0xC3, 0xD8, 0xBC, 0x9B, 0x84, 0x87, 0x91, 0x51, 0xB1, 0xAB, 0x81, 0x64, 0x47, 0xAF, 0x9D, 0x6A, 0x5B, 0x2D, 0xD6, 0x95, 0x77, 0x03, 0xC1, 0x10, 0xAD, 0x61, 0x0C, 0xBF, 0x11, 0x34, 0x7E, 0x01, 0x38, 0x20, 0x4B, 0xB6, 0x4A, 0x1A, 0x45, 0x99, 0x5F, 0x26, 0xBB, 0xC5, 0xCD, 0x23, 0xF1, 0xF7, 0xB4, 0x8E, 0xE1, 0xF8, 0x68, 0x56, 0x29, 0xD5, 0x3D, 0xEF, 0x12, 0x28, 0xC4, 0x2E, 0x79, 0xA6, 0x48, 0x85, 0x73, 0x14, 0xE4, 0xC6, 0x6B, 0x92, 0x30, 0x27, 0x93, 0x13, 0x0D, 0xE2, 0xC9, 0xF0, 0x65, 0xDF, 0xFB, 0xE3, 0x06, 0x2F, 0x8C, 0x4C, 0x18, 0x15, 0xD3, 0x49, 0x3E, 0x07, 0x59, 0xB0, 0x88, 0xA9, 0xC8, 0x3B, 0x86, 0xEE, 0x5C, 0x7A, 0x5E, 0xFF, 0x8D, 0xAC, 0x08, 0xE6, 0x60, 0x54, 0xA0, 0x7D, 0x40, 0x33, 0xA8, 0xFC, 0xE0, 0x37, 0x98, 0xBD, 0xEC, 0x09, 0xB2, 0x71, 0x58, 0x1F, 0xDE, 0x74, 0x89, 0x36, 0x52, 0x66, 0xA2, 0x3C, 0x96, 0x5D, 0x50, 0x90, 0x41, 0xF5, 0x17, 0x2B, 0x0B, 0xDC, 0xF6, 0x00, 0x83, 0xDD, 0x6D, 0xB5, 0x3A, 0x9C, 0xB8, 0x70, 0x7C, 0x43, 0x69, 0xFD, 0x32, 0x1B, 0xED, 0x0F, 0x55, 0x97, 0xC2, 0xFA, 0x39, 0x4F, 0x9A, 0x82, 0x19, 0xE7, 0x78, 0x6E, 0xCB, 0xA4, 0xBE, 0x24, 0xB3, 0xF3, 0xCC, 0xCF, 0x1C, 0xF9, 0x44, 0xA5, 0x1E, 0x80, 0x3F, 0xD0, 0x21, 0xA3, 0xE8, 0x31, 0x05, 0x16, 0x8A, 0xBA, 0x67, 0x0E, 0xE5, 0xB7, 0xD1, 0x42, 0x1D, 0xDB, 0x72, 0x6C, 0xA7, 0xCE, 0x04, 0x4D, 0xDA, 0xC7, 0x8B, 0x9F, 0x6F, 0x0A, 0x2C, 0xEB, 0xF2, 0x5A, 0x7B, 0xAA, 0x25, 0xC0, 0x62, 0xAE, 0xF4, 0xB9 };
        public static readonly byte[] GIExpansionKey = new byte[] { 0x54, 0x2F, 0xED, 0x67, 0x5D, 0xDD, 0x11, 0x2E, 0xB7, 0x40, 0x13, 0xE3, 0x29, 0xAB, 0x6D, 0x28, 0x3E, 0xD0, 0x4D, 0x51, 0xD3, 0x0B, 0x8F, 0x3C, 0x8F, 0x7D, 0x56, 0x0D, 0xB3, 0x5C, 0x5B, 0xDF, 0x8F, 0x05, 0x26, 0xE5, 0x9D, 0x36, 0xEE, 0x17, 0xF9, 0x40, 0xC3, 0x05, 0x6A, 0xF1, 0x1D, 0x2C, 0x79, 0xED, 0xC6, 0xE2, 0x0C, 0x15, 0x87, 0x93, 0xC1, 0x91, 0xE5, 0x8D, 0x44, 0x10, 0x98, 0x34, 0x08, 0x7A, 0xB6, 0x76, 0xAA, 0xB5, 0x34, 0x21, 0xEE, 0x72, 0x58, 0x27, 0x3F, 0x72, 0x5A, 0x93, 0x75, 0x78, 0x60, 0xC0, 0xA2, 0xF5, 0x52, 0x97, 0x9F, 0xF5, 0x28, 0x86, 0x23, 0x3A, 0xB4, 0xEA, 0xC3, 0x40, 0x12, 0x39, 0x92, 0xE2, 0x33, 0xD8, 0x7A, 0x39, 0x44, 0xA9, 0x5B, 0x58, 0x5F, 0x7C, 0xD9, 0xFC, 0x9F, 0xEF, 0x3F, 0x3A, 0x05, 0x5B, 0xA5, 0x4D, 0x1D, 0x63, 0x33, 0xD5, 0xEB, 0x43, 0x42, 0x79, 0x71, 0x85, 0x57, 0x92, 0xF8, 0xDE, 0xED, 0x7D, 0xE3, 0xF8, 0x33, 0x20, 0x2C, 0x92, 0x22, 0xE5, 0x6E, 0xCC, 0x1D, 0x21, 0x71, 0x04, 0xB8, 0xA7, 0x8D, 0x3B, 0xE6, 0x19, 0x53, 0x36, 0x1E, 0x14, 0x40, 0x12, 0xED, 0x7B, 0x85, 0x47, 0x8D, 0xD2, 0xCD, 0xF8, 0x4D, 0x71, 0xBC, 0x62 };
        public static readonly byte[] GIConstKey = new byte[] { 0xE3, 0xFC, 0x2D, 0x26, 0x9C, 0xC5, 0xA2, 0xEC, 0xD3, 0xF8, 0xC6, 0xD3, 0x77, 0xC2, 0x49, 0xB9 };
        public static readonly ulong GIConstVal = 0x567BA22BABB08098;

        public static readonly byte[] CBXExpansionKey = new byte[] { 0x3C, 0x5E, 0xAD, 0x0F, 0xD5, 0x09, 0x27, 0x3F, 0xB8, 0x70, 0x00, 0x9A, 0xCD, 0x30, 0x1B, 0xEB, 0xB7, 0x04, 0x71, 0xD9, 0x39, 0x80, 0x21, 0x29, 0xB5, 0xCC, 0x7A, 0xB2, 0xAE, 0xB6, 0x75, 0x14, 0x63, 0x2A, 0x82, 0x34, 0x70, 0xA5, 0x40, 0xEB, 0xF9, 0x4E, 0x95, 0x1C, 0x0A, 0xA4, 0xD0, 0xF6, 0x56, 0x1E, 0x0E, 0xE3, 0x7B, 0xBF, 0x0D, 0xC5, 0xD3, 0x04, 0xF3, 0x43, 0xDA, 0x76, 0x37, 0xDD, 0xAD, 0xE9, 0xF6, 0x97, 0x54, 0xD2, 0x56, 0xA2, 0x00, 0xBE, 0x96, 0xD0, 0x61, 0x4F, 0x8A, 0xBE, 0x5C, 0x32, 0x74, 0xC8, 0xFD, 0x7F, 0x2C, 0xFC, 0x5D, 0x4E, 0xD0, 0x6B, 0x2A, 0x2B, 0xF8, 0xDE, 0x12, 0x5B, 0xA2, 0x58, 0x8C, 0x4E, 0x02, 0xE5, 0x3C, 0xA6, 0xDB, 0x02, 0xBF, 0xAA, 0xE5, 0x12, 0xE0, 0xEF, 0x09, 0x36, 0xF6, 0xA0, 0xE5, 0x60, 0xE1, 0x62, 0xE4, 0x54, 0x02, 0xA7, 0xD1, 0x71, 0xC0, 0xF6, 0xE0, 0xFF, 0xDD, 0x01, 0xBA, 0xD5, 0x26, 0x94, 0x2D, 0x85, 0xA3, 0x7D, 0xDF, 0x0F, 0x94, 0x2F, 0xD6, 0x39, 0xE6, 0xEC, 0xCA, 0x86, 0x73, 0xD5, 0x66, 0x6A, 0x98, 0x92, 0x86, 0xCE, 0x20, 0xB4, 0xF0, 0x4C, 0xAA, 0xDD, 0x5A, 0xD5, 0x78, 0x2C, 0x81, 0xBE, 0xAE, 0x3A, 0x31, 0x14 };
        public static readonly byte[] CBXConstKey = new byte[] { 0xA2, 0x25, 0x25, 0x99, 0xB7, 0x62, 0xF4, 0x39, 0x28, 0xE1, 0xB7, 0x73, 0x91, 0x05, 0x25, 0x87 };
        public static readonly ulong CBXConstVal = 0xCEAC3B5A867837AC;

        public static readonly byte[] BH3Key = new byte[] { 0x8B, 0xD8, 0xD8, 0x92, 0xB6, 0x54, 0xB5, 0xCC, 0xBA, 0x8B, 0x35, 0x0F, 0x3C, 0x86, 0x97, 0x2B, 0x6C, 0x29, 0x21, 0x23, 0xB1, 0x32, 0x86, 0x00, 0x9C, 0x59, 0xED, 0x30, 0x49, 0xEA, 0xA4, 0x34, 0x8B, 0x65, 0x79, 0x98, 0xBB, 0x91, 0xD4, 0x90, 0xA8, 0xBB, 0x14, 0xB3, 0x4B, 0xF2, 0x24, 0x0B, 0x86, 0xF5, 0x1B, 0x42, 0xBB, 0x32, 0x44, 0xD5, 0xA8, 0xD2, 0x0F, 0x33, 0x16, 0xF3, 0x80, 0x7A, 0x46, 0x1B, 0xC7, 0x8F, 0x06, 0xD2, 0xE3, 0xC0, 0x36, 0x1B, 0x6E, 0x30, 0x10, 0x98, 0xC8, 0x21, 0x08, 0x56, 0x75, 0x76, 0x9D, 0xA1, 0xE7, 0xF8, 0xF4, 0x5F, 0x6E, 0xB3, 0x71, 0xE4, 0xB9, 0x43, 0x44, 0xC1, 0x7A, 0x00, 0xF8, 0x77, 0x20, 0x2B, 0x06, 0x6B, 0xED, 0x3F, 0xE9, 0x74, 0x13, 0x6E, 0xA5, 0x61, 0x2B, 0x1E, 0x45, 0x9C, 0x74, 0xB9, 0x82, 0x22, 0x9F, 0x32, 0xBC, 0xEF, 0x9B, 0x88, 0x5A, 0x9E, 0x55, 0xCC, 0xE5, 0xB5, 0xA2, 0x6A, 0x01, 0xEF, 0xEC, 0x13, 0xCF, 0x3E, 0x4F, 0x7C, 0xA0, 0xF8, 0x91, 0xE6, 0x70, 0x6D, 0x4B, 0xDD, 0xEC, 0x24, 0x14, 0x7B, 0x97, 0x23, 0x00, 0x93, 0x0F, 0xCE, 0xB6, 0x38, 0xB5, 0xB6, 0xB0, 0x95, 0x4E, 0x0E, 0x07, 0xE0, 0xEE, 0x6D, 0x0E, 0xDC, 0xB2, 0x3D, 0xC9, 0x7A, 0xA5, 0x41, 0xB2, 0x02, 0xAD, 0xDE, 0x72, 0x10, 0x65, 0xCC, 0x7A, 0x7E, 0xCC, 0xD0, 0x69, 0xC6, 0xA7, 0xB2, 0xB6, 0x38, 0x76, 0x55, 0x6B, 0xA0, 0xAD, 0xF1, 0xEF, 0xA0, 0x9D, 0xCF, 0x2E, 0x89, 0x07, 0x64, 0x6F, 0x1D, 0xE0, 0x51, 0x43, 0xB3, 0x4C, 0x15, 0x65, 0x71, 0x76, 0xFD, 0x1E, 0x0A, 0xA3, 0x00, 0x18, 0x36, 0x12, 0xB0, 0xFB, 0x31, 0xCE, 0x22, 0x2D, 0xD4, 0xFD, 0x09, 0x1D, 0x1A, 0x99, 0x19, 0xFA, 0x02, 0x48, 0x4D, 0xC8, 0x42, 0xA1, 0x2B, 0x8D, 0xA6, 0xF2, 0x53, 0x19, 0x92, 0x57, 0x67, 0xBD, 0xB2, 0x90, 0xE6, 0x01, 0x36, 0xEE, 0x99, 0x1D, 0xC6, 0x30, 0xA0, 0x41, 0xFE, 0xAC, 0x06, 0xC0, 0x56, 0xEE, 0xF4, 0xB8, 0x31, 0xDF, 0xDE, 0xE6, 0x9E, 0x6E, 0x61, 0x42, 0x59, 0xD6, 0x99, 0x0F, 0x87, 0x1E, 0xDD, 0x9D, 0xB5, 0xCA, 0xBC, 0xF9, 0x82, 0xE2, 0x27, 0xD2, 0x2C, 0x5E, 0x51, 0xD8, 0x11, 0x17, 0x4A, 0x32, 0xA3, 0x6E, 0xCB, 0x33, 0xEE, 0x00, 0xC2, 0x22, 0xF8, 0x2C, 0x7E, 0x52, 0x0B, 0xB8, 0x84, 0x83, 0xD7, 0x65, 0x5A, 0x18, 0x4F, 0xB9, 0x54, 0x26, 0x05, 0x02, 0x4D, 0x52, 0x65, 0xAA, 0x03, 0x30, 0x16, 0x45, 0x43, 0x41, 0xDC, 0xBA, 0x75, 0xBD, 0xF2, 0x23, 0xCB, 0xF5, 0x32, 0xE6, 0x41, 0xEC, 0x06, 0x09, 0x86, 0xC2, 0x2C, 0xC0, 0xD7, 0x09, 0xE7, 0xA2, 0xE3, 0x61, 0xFC, 0x10, 0x03, 0x96, 0xF2, 0x3D, 0x31, 0x97, 0x0F, 0x0B, 0x3C, 0x64, 0x9D, 0xC8, 0x72, 0x1C, 0xF5, 0x6B, 0x9A, 0x13, 0x0D, 0xED, 0x0E, 0xB0, 0xFE, 0x4E, 0x48, 0x51, 0x38, 0x90, 0x01, 0x60, 0x61, 0xF3, 0x10, 0x98, 0xFB, 0xDF, 0x13, 0x76, 0x3A, 0x70, 0x6F, 0x1E, 0x05, 0x13, 0xB1, 0x77, 0x8F, 0xDF, 0x37, 0xA3, 0x96, 0xFD, 0xFA, 0x05, 0xFE, 0x6E, 0xAA, 0xBB, 0x12, 0x12, 0xE6, 0x89, 0xAD, 0xCA, 0x20, 0x0D, 0x4C, 0x35, 0x08, 0xFF, 0xC7, 0x92, 0x68, 0x9D, 0x5B, 0xAC, 0x38, 0xA2, 0x7C, 0x04, 0x2B, 0x2F, 0x02, 0x99, 0x81, 0x17, 0x97, 0xC4, 0x92, 0xF7, 0xD8, 0x6F, 0xCE, 0x91, 0x6F, 0x71, 0x5F, 0x31, 0xB4, 0x2F, 0xCC, 0x14, 0x64, 0xA4, 0x32, 0xC0, 0xE5, 0xF1, 0xA0, 0x34, 0xBD, 0x60, 0x87, 0x9A, 0x12, 0x2B, 0x2C, 0xCC, 0x83, 0xEE, 0x99, 0x4A, 0x3E, 0x5A, 0xB5, 0x94, 0x3F, 0xD1, 0x3C, 0x50, 0xB9, 0xAF, 0x1F, 0xFF, 0x8B, 0xB0, 0xAE, 0xF7, 0xC4, 0x1A, 0xFE, 0x8A, 0x95, 0x25, 0x72, 0xAA, 0x23, 0x88, 0x49, 0x98, 0xB3, 0x1D, 0x28, 0x6C, 0xC6, 0x8B, 0xA9, 0x47, 0x33, 0x65, 0xAE, 0xFA, 0x1F, 0xBF, 0x72, 0x2F, 0x0D, 0xBF, 0x33, 0xB4, 0x4B, 0x33, 0x65, 0x08, 0xD6, 0x17, 0x35, 0x8F, 0x75, 0xC9, 0xDF, 0xF4, 0xB7, 0xC2, 0x1A, 0x8F, 0x4D, 0x06, 0x5F, 0x22, 0x2C, 0x62, 0x2E, 0x80, 0x92, 0x9F, 0xF5, 0xF5, 0x09, 0xFA, 0xEE, 0xDB, 0x52, 0xBD, 0x8E, 0x6B, 0x6B, 0x68, 0xD1, 0xBF, 0xFD, 0x9B, 0x51, 0xF6, 0x2B, 0xEC, 0xE4, 0x8C, 0x1D, 0x36, 0x21, 0xCA, 0x08, 0x50, 0x4D, 0x3A, 0xE1, 0x6B, 0x0F, 0x75, 0xC7, 0xC9, 0xC8, 0x76, 0xA1, 0x7D, 0xCD, 0xCD, 0x91, 0x20, 0x65, 0xE6, 0x5E, 0xD9, 0x1A, 0x1A, 0xBD, 0xA5, 0x5D, 0xB9, 0xEA, 0x9D, 0x09, 0xC3, 0x80, 0x45, 0xAD, 0x29, 0x25, 0x4A, 0xAC, 0x9B, 0xFF, 0xBF, 0x43, 0xFC, 0x95, 0x9F, 0x58, 0x66, 0xDB, 0x30, 0xB6, 0xDD, 0x16, 0x3D, 0x18, 0xC2, 0x6B, 0x3D, 0xDB, 0xC0, 0xDC, 0xFC, 0x13, 0xF8, 0x6A, 0xF3, 0x4B, 0x7D, 0x27, 0x14, 0xE7, 0xE5, 0xE5, 0xC2, 0xDF, 0xE6, 0xB3, 0x54, 0xCD, 0x89, 0x30, 0xE3, 0x91, 0x2F, 0xEE, 0x61, 0x9D, 0x60, 0x06, 0xC6, 0x8F, 0x32, 0x74, 0x99, 0x18, 0x44, 0xF8, 0xFE, 0xD8, 0xED, 0xC5, 0x55, 0x29, 0x2C, 0x94, 0x90, 0x96, 0x3E, 0x3D, 0x3C, 0x56, 0xDB, 0xC1, 0xD5, 0xEC, 0x86, 0xFF, 0x86, 0x71, 0xCE, 0xFE, 0x59, 0xC2, 0x33, 0x89, 0x6D, 0xF3, 0x46, 0x88, 0x53, 0xA6, 0xF7, 0x8A, 0x57, 0xF8, 0x0D, 0x1A, 0xD6, 0x8C, 0xD7, 0x44, 0xAF, 0xC6, 0xFF, 0x1E, 0x98, 0x6B, 0xE3, 0x0A, 0xBA, 0x87, 0xEA, 0x02, 0xA9, 0x97, 0x2D, 0x5E, 0x16, 0x81, 0x99, 0xBA, 0xD7, 0x82, 0x5F, 0xCC, 0x1A, 0xDB, 0x79, 0xAB, 0xAD, 0xB4, 0x1F, 0x48, 0x46, 0xCD, 0x06, 0x95, 0xF1, 0xFB, 0x2F, 0xA4, 0x82, 0x03, 0x2B, 0x07, 0xF0, 0x84, 0xEF, 0x93, 0xE7, 0x27, 0x0D, 0xA6, 0x25, 0x02, 0x5E, 0xC2, 0x07, 0xAE, 0x9C, 0xDA, 0x36, 0x03, 0x48, 0xB3, 0x4A, 0xE3, 0x85, 0x8C, 0x60, 0x9E, 0x7D, 0x8E, 0x1C, 0x04, 0x23, 0xE6, 0xD1, 0xCE, 0x3E, 0x89, 0xEA, 0x75, 0xA6, 0xF0, 0x26, 0x3D, 0xD2, 0x84, 0x30, 0x75, 0x8B, 0xD2, 0xA4, 0x76, 0x79, 0x7A, 0x3A, 0x5A, 0x4B, 0xEC, 0xE7, 0x88, 0xC7, 0xCA, 0x9B, 0x65, 0x79, 0xDF, 0x04, 0x56, 0xD1, 0x42, 0x69, 0x04, 0xAB, 0xA7, 0xC1, 0x21, 0xE4, 0x74, 0xA1, 0x6E, 0x9D, 0x0D, 0x75, 0x68, 0x81, 0x58, 0x58, 0x62, 0x9C, 0x68, 0x99, 0xC2, 0xB2, 0x0E, 0x2A, 0x66, 0xD0, 0x01, 0xB2, 0x26, 0xA3, 0x60, 0x4F, 0xBB, 0x53, 0xE3, 0xDC, 0x63, 0xC0, 0xB2, 0x50, 0xFF, 0x55, 0x39, 0x1D, 0x70, 0x82, 0x22, 0xE1, 0xEB, 0x6C, 0x98, 0x52, 0xC2, 0xE1, 0xC4, 0xB7, 0x76, 0x7C, 0x0D, 0xA4, 0xB4, 0xD7, 0x64, 0x44, 0x9F, 0xE2, 0xA5, 0xCC, 0x24, 0x64, 0x9E, 0x67, 0x9D, 0xAA, 0x1D, 0xE5, 0x9F, 0x4A, 0x47, 0x3F, 0x7F, 0x76, 0x30, 0xA9, 0xEE, 0xC7, 0xFA, 0xAA, 0xAA, 0xB2, 0x33, 0x3E, 0x0E, 0x26, 0x8A, 0xA3, 0xC9, 0x03, 0x41, 0x2A, 0xF2, 0xEA, 0x21, 0xE5, 0xE1, 0x59, 0xCA, 0xDD, 0xF1, 0x74, 0x15, 0xB5, 0xC4, 0xED, 0x96, 0x7E, 0x52, 0xA5, 0xCF, 0x0E, 0x3F, 0xDE, 0x0D, 0x39, 0x19, 0x67, 0x99, 0x04, 0xC1, 0x45, 0x21, 0x20, 0xCA, 0x57, 0x9B, 0x29, 0x0F, 0x79, 0xED, 0xC2, 0xB9, 0xBF, 0x29, 0xA2, 0xCA, 0x30, 0xF9, 0xE6, 0x09, 0xAB, 0x58, 0x11, 0x63, 0x15, 0x18, 0xD3, 0x18, 0xFF, 0xF6, 0xD5, 0x23, 0xCC, 0x91, 0x96, 0x25, 0x40, 0x35, 0xDA, 0x4D, 0xB6, 0x85 };
        public static readonly byte[] BH3SBox = new byte[] { 0x75, 0x45, 0xC7, 0x35, 0x7E, 0x7B, 0x46, 0x29, 0xE7, 0x10, 0xC1, 0xEB, 0x52, 0xCA, 0xC2, 0xA0, 0x0D, 0xCC, 0x31, 0xA7, 0xA8, 0x44, 0x07, 0x4C, 0x93, 0x6E, 0xFC, 0x0E, 0xF9, 0xFB, 0xDD, 0xAA, 0x4A, 0x84, 0x18, 0xD9, 0x2C, 0x09, 0x21, 0x13, 0x15, 0xBB, 0x37, 0x8E, 0xE2, 0x77, 0x60, 0x22, 0xE8, 0x06, 0x00, 0xA3, 0x56, 0xB7, 0xE9, 0xF1, 0x1B, 0xCB, 0x40, 0xC9, 0x7C, 0xC5, 0xE6, 0xF5, 0xC3, 0x0A, 0x69, 0x5E, 0x9C, 0x39, 0x11, 0x5F, 0xA2, 0xC0, 0xDB, 0x32, 0x8A, 0x3A, 0x63, 0xD8, 0x3F, 0x1A, 0xCE, 0xC6, 0x6C, 0xB3, 0x08, 0x59, 0x64, 0x14, 0x4D, 0x05, 0xD5, 0x34, 0x19, 0x2B, 0x4E, 0x3B, 0x99, 0x1F, 0xD2, 0x28, 0xAF, 0xEF, 0xE0, 0x95, 0x2D, 0xE3, 0xAB, 0x5D, 0x71, 0x53, 0x3E, 0x04, 0x47, 0x25, 0xD7, 0xF8, 0xAC, 0x8C, 0xB2, 0x9A, 0xA9, 0x9F, 0xF7, 0x88, 0xDA, 0x27, 0x9D, 0x89, 0x43, 0x0B, 0x24, 0xBD, 0x26, 0x38, 0x6A, 0xA5, 0x1C, 0xD0, 0xEE, 0x62, 0x67, 0x23, 0x9B, 0xEA, 0xDE, 0x72, 0x6D, 0x80, 0x1E, 0x3D, 0x0F, 0x2E, 0x54, 0xFF, 0x3C, 0x1D, 0xF0, 0x03, 0x5A, 0x65, 0xBC, 0x30, 0x61, 0x57, 0x6B, 0xBF, 0xA6, 0x58, 0x76, 0x2F, 0x01, 0xA1, 0x20, 0xD3, 0x74, 0x2A, 0x97, 0x8F, 0x87, 0x50, 0xAE, 0xDF, 0x55, 0xF3, 0x7F, 0xB0, 0xD6, 0x41, 0xE4, 0x4B, 0x02, 0x86, 0x16, 0x85, 0x7D, 0xBA, 0x0C, 0xD4, 0xFE, 0x7A, 0xC4, 0x51, 0x8D, 0x78, 0xCD, 0x33, 0xE1, 0x98, 0xAD, 0x79, 0x68, 0xB6, 0x17, 0xFD, 0xC8, 0x82, 0x6F, 0x4F, 0xD1, 0x8B, 0xE5, 0x66, 0xFA, 0x91, 0xB5, 0x42, 0x5C, 0x49, 0xB9, 0x73, 0xF6, 0x5B, 0x36, 0xB8, 0xB4, 0xB1, 0xEC, 0x90, 0x81, 0x92, 0xF2, 0xF4, 0x94, 0x83, 0x96, 0x9E, 0x48, 0xBE, 0xDC, 0xED, 0xCF, 0xA4, 0x70, 0x12, 0xA7, 0xA6, 0xF8, 0xF0, 0xD9, 0x1B, 0x85, 0xF4, 0xA9, 0x36, 0xA2, 0xE6, 0xCB, 0xCF, 0x9C, 0x2E, 0x78, 0xCE, 0x67, 0x07, 0x50, 0xF2, 0x0B, 0x2B, 0xB8, 0xA4, 0x1E, 0x28, 0xD7, 0x17, 0x5F, 0x74, 0xC8, 0xDA, 0x2C, 0x86, 0xAD, 0xBB, 0xD8, 0xFB, 0x6C, 0x1A, 0x8F, 0x0C, 0xE4, 0x97, 0x13, 0x2D, 0xB2, 0x5B, 0x65, 0x49, 0x45, 0x7C, 0x7B, 0x38, 0xDE, 0xAC, 0x58, 0x2F, 0x33, 0xD2, 0x52, 0x14, 0x02, 0x9D, 0xF5, 0x6A, 0x43, 0x87, 0xE0, 0x18, 0x69, 0x5E, 0x68, 0xE9, 0xAE, 0xF9, 0x63, 0xBC, 0xBF, 0xC2, 0x94, 0xB4, 0x30, 0xE8, 0x23, 0x0F, 0x64, 0x26, 0x80, 0xB3, 0x8D, 0xC1, 0xE3, 0x15, 0x34, 0x05, 0xC9, 0x29, 0xE2, 0xA8, 0x55, 0xD0, 0x37, 0xDC, 0xF6, 0xBA, 0x0D, 0x8B, 0x8E, 0x60, 0xEA, 0x84, 0x90, 0x48, 0x79, 0x10, 0x9F, 0x1F, 0x8A, 0xBD, 0xFD, 0x39, 0x04, 0x3F, 0xB9, 0x4C, 0x75, 0x3B, 0x22, 0x46, 0x7F, 0xDB, 0x2A, 0x0E, 0x35, 0x40, 0xED, 0xFC, 0x47, 0xB1, 0x7D, 0xD4, 0x62, 0x9E, 0x5D, 0xC5, 0x51, 0xA1, 0x88, 0x89, 0x11, 0x31, 0xC4, 0xFE, 0x27, 0x99, 0x5A, 0x3A, 0x91, 0x81, 0x95, 0x70, 0x1D, 0x12, 0x98, 0x4F, 0x20, 0x92, 0x56, 0x6D, 0xD5, 0xE5, 0xEC, 0xAA, 0xC0, 0xA3, 0x9A, 0x06, 0x32, 0xEE, 0x3D, 0x53, 0x08, 0xD3, 0x3E, 0xDF, 0xE1, 0xA0, 0xC6, 0xB7, 0x03, 0x6B, 0x59, 0xA5, 0x6F, 0x09, 0xD1, 0x93, 0x54, 0xF3, 0x77, 0xC7, 0xBE, 0x8C, 0xE7, 0x25, 0x76, 0x41, 0x71, 0x72, 0xCC, 0x9B, 0x16, 0x7E, 0x4B, 0x44, 0xAF, 0xF7, 0xCD, 0xAB, 0xB0, 0x7A, 0x57, 0xB5, 0x66, 0xEF, 0xEB, 0xFF, 0xB6, 0x00, 0x4E, 0xCA, 0x61, 0xC3, 0xF1, 0x4D, 0x21, 0x1C, 0xDD, 0x0A, 0xD6, 0x4A, 0x5C, 0x42, 0x83, 0x6E, 0x96, 0x19, 0x01, 0x73, 0x3C, 0xFA, 0x24, 0x82, 0x5D, 0x33, 0x3A, 0x97, 0x9D, 0xCE, 0x65, 0x39, 0xFB, 0xEB, 0x51, 0xC1, 0x59, 0x1C, 0xAF, 0x09, 0x27, 0x57, 0xA0, 0xD4, 0x75, 0xCF, 0xF9, 0x8A, 0x3C, 0xAA, 0x6E, 0x6C, 0xE8, 0xDF, 0x12, 0x2A, 0x1D, 0x02, 0xB4, 0x8C, 0x0C, 0xF7, 0x4A, 0xBD, 0xF4, 0x71, 0x16, 0xC2, 0x13, 0x86, 0x50, 0x2D, 0xA7, 0x28, 0x4B, 0x03, 0x17, 0x00, 0x15, 0x25, 0x7C, 0x19, 0xFE, 0x23, 0xF2, 0x0E, 0xC3, 0x9A, 0x0A, 0x1E, 0xF8, 0x7E, 0x70, 0x0B, 0x9E, 0x2C, 0xF3, 0xC9, 0xE4, 0xAE, 0x2E, 0x89, 0x4E, 0xA8, 0x87, 0xD9, 0x7A, 0x18, 0xDB, 0x04, 0xF0, 0xBB, 0x83, 0x8D, 0xE0, 0x92, 0x5F, 0x2B, 0x3E, 0xC0, 0xD5, 0xB6, 0x38, 0x76, 0xC5, 0x4C, 0x29, 0x36, 0x53, 0x41, 0x4D, 0x1F, 0x11, 0x4F, 0xBC, 0xD0, 0xDC, 0x96, 0x24, 0xEC, 0x9F, 0x47, 0x22, 0x6B, 0xCA, 0x56, 0x42, 0xEF, 0x99, 0x7D, 0x43, 0x63, 0x0F, 0xB8, 0x48, 0xAC, 0x55, 0xE1, 0x5E, 0xED, 0xC6, 0xD3, 0xD6, 0x40, 0x3D, 0xA5, 0x44, 0x30, 0xFC, 0xD2, 0x69, 0x32, 0xF6, 0x64, 0x01, 0x46, 0x34, 0xD1, 0xA9, 0x6D, 0x5A, 0x80, 0x35, 0xBA, 0x9C, 0x79, 0xCB, 0x61, 0x78, 0x08, 0x3F, 0x14, 0x8F, 0x94, 0xE3, 0x2F, 0xC8, 0x77, 0x54, 0x49, 0xA2, 0xFF, 0xE2, 0x6A, 0xB0, 0xD7, 0xDD, 0x5B, 0x68, 0xB2, 0x81, 0xA4, 0x1B, 0x05, 0xAB, 0x88, 0xFD, 0x20, 0xB7, 0x93, 0x7B, 0x37, 0xB1, 0x9B, 0xF5, 0xB9, 0xAD, 0xB5, 0x45, 0x73, 0xC4, 0xBE, 0x67, 0x8E, 0x1A, 0x07, 0xE6, 0x58, 0x3B, 0xEA, 0xA3, 0xC7, 0x85, 0x6F, 0x74, 0x8B, 0x60, 0x7F, 0xCD, 0x62, 0xE7, 0xE5, 0xA1, 0x10, 0xF1, 0xDE, 0x21, 0x72, 0x5C, 0x91, 0x31, 0x95, 0xDA, 0x90, 0x26, 0x52, 0xA6, 0xE9, 0x0D, 0xFA, 0x84, 0x98, 0x82, 0xB3, 0x06, 0xD8, 0xEE, 0x66, 0xCC, 0xBF, 0x35, 0x99, 0xD2, 0xA3, 0xC4, 0x83, 0x50, 0xC5, 0x7C, 0x54, 0xB0, 0x27, 0x68, 0xF7, 0xBD, 0xCA, 0x79, 0x08, 0x94, 0x85, 0x6B, 0xC2, 0xC8, 0xEF, 0x46, 0xF8, 0xC6, 0xA1, 0x29, 0x57, 0xD5, 0x5B, 0x11, 0x6F, 0x0F, 0xB6, 0xF9, 0x87, 0xAC, 0xD3, 0x1E, 0x84, 0xFD, 0x43, 0x09, 0xA2, 0x28, 0x56, 0xA0, 0xAD, 0x81, 0x55, 0x98, 0x97, 0x78, 0xE9, 0xDF, 0x1F, 0x2E, 0xE7, 0x9D, 0x59, 0x01, 0x1C, 0x52, 0x88, 0x62, 0x5D, 0x31, 0x30, 0x6D, 0x38, 0x2C, 0x24, 0x32, 0x26, 0x6E, 0xF1, 0x4C, 0x7D, 0x1D, 0x74, 0x7F, 0xC9, 0xD1, 0xD6, 0xB8, 0x51, 0xF5, 0x8D, 0x9A, 0x8F, 0xB5, 0xB3, 0xB2, 0x47, 0x3C, 0x1A, 0x8A, 0xDD, 0xF3, 0xDA, 0x5A, 0xC0, 0xD4, 0x07, 0x12, 0x53, 0x45, 0x93, 0xAB, 0xCB, 0x67, 0x48, 0x00, 0x8C, 0xE1, 0x40, 0x2F, 0x6C, 0x17, 0x22, 0xBA, 0xF4, 0xE5, 0xD7, 0x3E, 0x7E, 0x5E, 0xF6, 0x37, 0x39, 0x20, 0xA4, 0x4A, 0xCC, 0x0A, 0x03, 0x10, 0x33, 0x36, 0x9F, 0x2A, 0x70, 0x5C, 0x9C, 0xFE, 0x0D, 0x41, 0xDE, 0x49, 0x3D, 0x92, 0x89, 0xDB, 0x05, 0x6A, 0x23, 0xE0, 0x8E, 0x8B, 0xAA, 0x77, 0x69, 0x63, 0x0C, 0x2D, 0xA7, 0x14, 0x3F, 0xEB, 0xF0, 0xCD, 0x3B, 0x4B, 0xAE, 0x2B, 0xFA, 0xFB, 0x86, 0x58, 0x9B, 0x34, 0x7A, 0x95, 0xC3, 0x16, 0x96, 0xE3, 0x1B, 0xB7, 0x02, 0x44, 0x4F, 0xAF, 0xBF, 0xFC, 0xB1, 0x13, 0xEE, 0x72, 0x06, 0xD0, 0x04, 0x0B, 0xA8, 0x80, 0xBC, 0x5F, 0x65, 0xDC, 0xE2, 0x60, 0x7B, 0xBB, 0xBE, 0x4D, 0x61, 0xCE, 0xB4, 0x82, 0x18, 0xD9, 0xC7, 0x76, 0x73, 0x66, 0xC1, 0xA5, 0xFF, 0xCF, 0xEA, 0x75, 0xE8, 0x9E, 0x3A, 0xA9, 0xE6, 0x4E, 0x71, 0x21, 0x15, 0x25, 0xF2, 0xE4, 0xB9, 0xA6, 0x19, 0x42, 0x90, 0x0E, 0xEC, 0xED, 0x91, 0x64, 0xD8 };
        public static readonly byte[] BH3ExpansionKey = new byte[] { 0x87, 0xA5, 0x7F, 0xFA, 0x75, 0x53, 0x8B, 0x29, 0xA9, 0x72, 0x62, 0x68, 0xAD, 0x4D, 0x83, 0x81, 0x0A, 0xB1, 0x2E, 0xAA, 0x63, 0x88, 0xF2, 0x18, 0x6C, 0xB2, 0xBC, 0xDC, 0x4A, 0x95, 0x30, 0x07, 0x81, 0x1D, 0xEF, 0x5E, 0x16, 0xC3, 0x9B, 0x86, 0x77, 0x8F, 0xEC, 0x0E, 0x2A, 0x22, 0xF1, 0x6B, 0x52, 0x79, 0xD6, 0xEB, 0xF0, 0xC8, 0xD8, 0x0C, 0x72, 0x92, 0xDD, 0x57, 0xE1, 0xF8, 0x42, 0x2B, 0x5E, 0x44, 0x44, 0x48, 0x9A, 0xC6, 0x21, 0x6E, 0xED, 0x44, 0xE8, 0x35, 0x11, 0x5C, 0x93, 0x73, 0xA5, 0x9C, 0xA1, 0x67, 0x29, 0x51, 0x62, 0xEE, 0xE7, 0x15, 0x85, 0xBE, 0xAD, 0x20, 0x28, 0xAB, 0x17, 0xEE, 0xE4, 0x90, 0x3A, 0x7A, 0xCE, 0x28, 0xAC, 0xBF, 0xAB, 0xD0, 0xAB, 0xA2, 0xCE, 0x22, 0x47, 0x97, 0x8B, 0xA2, 0xE9, 0x47, 0x0C, 0x38, 0x3C, 0xBB, 0xBA, 0x51, 0xBE, 0x4F, 0xAD, 0xDE, 0x3A, 0xC5, 0x02, 0xDD, 0xB3, 0x50, 0x8B, 0xBA, 0xC6, 0x3E, 0xC2, 0xFD, 0xA7, 0xB8, 0x90, 0xC1, 0x82, 0x6F, 0x82, 0xBF, 0xCC, 0x4D, 0xA3, 0xF0, 0xCB, 0xAC, 0x49, 0x42, 0x8B, 0xFC, 0xFC, 0x8B, 0xDD, 0x3D, 0xA4, 0x11, 0x2F, 0x18, 0x17, 0xB2, 0x62, 0x2B, 0x5A, 0xB6, 0x64, 0xF7, 0xB3, 0xC9 };
        public static readonly byte[] BH3ConstKey = new byte[] { 0x28, 0x20, 0x24, 0xC9, 0x95, 0x36, 0x70, 0x22, 0xFF, 0x23, 0x0A, 0x03, 0x3F, 0x5D, 0xD0, 0x88 };

        public static readonly byte[] Mr0kExpansionKey = new byte[] { 0x2F, 0xE0, 0x89, 0x14, 0xE8, 0x23, 0x4E, 0xE6, 0x91, 0x6D, 0xED, 0xED, 0x86, 0x62, 0x85, 0x1C, 0xD7, 0x0F, 0x87, 0x2B, 0x64, 0xF3, 0xE0, 0x40, 0xDC, 0x27, 0x17, 0x4C, 0xC2, 0x73, 0x4E, 0x6D, 0x00, 0xE7, 0x91, 0x04, 0x4E, 0x14, 0x60, 0x8D, 0x1A, 0xE8, 0x36, 0x4F, 0xCF, 0xFB, 0x50, 0xA7, 0x5D, 0x89, 0x51, 0x7B, 0xBB, 0xEB, 0x4F, 0x1E, 0x56, 0xA0, 0xB0, 0x1F, 0x48, 0x67, 0x86, 0x21, 0x31, 0xF8, 0xA2, 0xB5, 0xED, 0x90, 0xA4, 0x46, 0xF1, 0x4E, 0x36, 0x38, 0x63, 0x03, 0xA9, 0x8C, 0x05, 0xD3, 0x2B, 0x17, 0xB2, 0x18, 0x93, 0x34, 0xE0, 0xAA, 0x63, 0x2E, 0x39, 0x99, 0x7D, 0x08, 0x33, 0x0C, 0x3F, 0xB0, 0x07, 0xEE, 0xD2, 0xB6, 0x8E, 0x0A, 0xB4, 0x3D, 0xA6, 0xBF, 0x77, 0xAF, 0xBE, 0x17, 0x83, 0xC0, 0x83, 0x2A, 0x57, 0x83, 0xB2, 0xA8, 0xF7, 0xA3, 0xDE, 0xE6, 0x58, 0x4C, 0xA5, 0x33, 0xF1, 0xE0, 0x9B, 0x3D, 0x7B, 0xC7, 0x26, 0x0B, 0x0E, 0x87, 0xAA, 0x10, 0xB8, 0x5B, 0xCD, 0x9D, 0x01, 0x0B, 0x64, 0x92, 0xA8, 0xE4, 0xDE, 0x76, 0xA8, 0xE3, 0xAD, 0xA2, 0xC6, 0xB9, 0x79, 0xBC, 0xEC, 0xF7, 0x37, 0xCF, 0x6C, 0x3D, 0x0D, 0x68, 0xB1, 0x1E, 0xFC, 0x38, 0x43, 0x85 };
        public static readonly byte[] Mr0kKey = new byte[] { 0xA1, 0x55, 0x38, 0x57, 0xD0, 0xFA, 0x09, 0xEC, 0xB6, 0x74, 0x76, 0xC7, 0x60, 0x0A, 0xF1, 0x6C, 0x4C, 0x45, 0xDC, 0x03, 0x80, 0x18, 0x94, 0xDB, 0x75, 0x2E, 0x35, 0xBF, 0x74, 0x29, 0xAE, 0x2D, 0xFA, 0x37, 0x1A, 0x83, 0x05, 0xAB, 0x2A, 0x47, 0xB8, 0x4D, 0x88, 0xBF, 0xD3, 0x31, 0x96, 0x53, 0xCB, 0xA9, 0x81, 0xD4, 0xAF, 0x3D, 0xE3, 0xBA, 0xC7, 0x84, 0x23, 0xD2, 0xEC, 0xB2, 0xD7, 0x02, 0x4F, 0xC2, 0x45, 0xF4, 0x53, 0x56, 0x6E, 0xD6, 0xA6, 0xE8, 0x8C, 0x1D, 0xAE, 0x22, 0x0B, 0x75, 0xE6, 0xE7, 0x82, 0x88, 0x06, 0x61, 0xB8, 0x4B, 0xA3, 0xCE, 0x52, 0x02, 0x5C, 0x20, 0xE0, 0x19, 0x03, 0x08, 0xD2, 0x4B, 0x84, 0xF4, 0x11, 0x41, 0xC9, 0xF7, 0xE0, 0x0D, 0x86, 0x09, 0x45, 0xF0, 0xF2, 0x31, 0xE2, 0x88, 0xC6, 0xE3, 0x3E, 0x40, 0x17, 0x3A, 0xC0, 0x0C, 0x81, 0x8A, 0x80, 0xC3, 0x76, 0xA4, 0x85, 0x2D, 0x55, 0xB9, 0x6D, 0x32, 0x31, 0xA3, 0xBB, 0xEC, 0xB4, 0x50, 0xA5, 0x7E, 0xA4, 0x87, 0xEA, 0x5B, 0x9A, 0x67, 0x6C, 0xE0, 0x53, 0x4D, 0x58, 0x29, 0x84, 0x99, 0x83, 0xB0, 0x04, 0x0A, 0x43, 0x9C, 0xF6, 0xB8, 0x57, 0x5C, 0x68, 0x34, 0x60, 0x36, 0xE6, 0x73, 0x8C, 0xA8, 0x00, 0xA7, 0x64, 0x91, 0xBE, 0xBE, 0x6F, 0x1E, 0x7B, 0x57, 0x41, 0xB8, 0xAF, 0x13, 0x29, 0x87, 0x27, 0xE1, 0x64, 0xB5, 0x46, 0xA6, 0xFA, 0x9E, 0x71, 0x15, 0x85, 0xB5, 0x0D, 0x00, 0x0D, 0xA9, 0x41, 0xFE, 0x1F, 0x05, 0xD8, 0xF2, 0xFA, 0x74, 0x9F, 0x3D, 0xE8, 0x61, 0xA5, 0x06, 0x0A, 0x8A, 0xC4, 0xF6, 0x64, 0x4F, 0xCE, 0x25, 0x72, 0x81, 0x34, 0xFA, 0x81, 0x0C, 0xC9, 0xC6, 0xF4, 0xA1, 0x28, 0x4F, 0x14, 0xD3, 0x0E, 0xE1, 0xDB, 0x86, 0xE1, 0x1E, 0x3A, 0xA9, 0xB3, 0xF1, 0x17, 0xDE, 0x6E, 0x9D, 0x5B, 0x08, 0x79, 0xE0, 0x93, 0x02, 0xF0, 0xAD, 0x2B, 0x21, 0x68, 0x7A, 0xC7, 0xFE, 0xEB, 0x1E, 0xD9, 0x8B, 0x2C, 0x85, 0xCE, 0x69, 0xDB, 0xDE, 0x6D, 0x30, 0x4B, 0x0E, 0x74, 0x9C, 0xC8, 0x2D, 0x8A, 0xE5, 0x0C, 0x10, 0x6B, 0xF1, 0x11, 0x41, 0x14, 0x69, 0xF9, 0x5F, 0x68, 0xB8, 0x6A, 0xD9, 0x0E, 0x03, 0x72, 0x9C, 0x5F, 0x35, 0x2E, 0xB0, 0x88, 0x66, 0x17, 0xB3, 0xE6, 0xCB, 0xF2, 0xF2, 0xC3, 0xE4, 0x80, 0x4F, 0x6D, 0x07, 0x15, 0x85, 0x31, 0x85, 0x78, 0xC2, 0x60, 0x2E, 0xB5, 0x7A, 0x16, 0xEE, 0x61, 0xEB, 0x9B, 0x33, 0x71, 0xBD, 0x19, 0x4A, 0xBA, 0xA9, 0x72, 0xA1, 0xEC, 0x32, 0xFF, 0x27, 0x79, 0x6F, 0x33, 0x2B, 0xC7, 0xC9, 0x88, 0x7B, 0x99, 0x6F, 0x34, 0xA2, 0xD1, 0x25, 0xC6, 0x8D, 0x91, 0xE7, 0xBA, 0x7E, 0xDD, 0x16, 0x7A, 0x3D, 0x39, 0xC3, 0x07, 0x3A, 0xD5, 0xE7, 0x0D, 0x48, 0xEB, 0x28, 0x46, 0xE0, 0xE8, 0x6E, 0x8F, 0xDF, 0xA4, 0x67, 0x82, 0x8E, 0x4E, 0x95, 0xE1, 0xA3, 0x27, 0x1F, 0x54, 0x47, 0x9D, 0x97, 0xA6, 0x21, 0x00, 0x2B, 0x84, 0xBF, 0xB8, 0x3D, 0x39, 0x74, 0x72, 0x22, 0x9B, 0xC2, 0xDB, 0xEE, 0x3A, 0x9C, 0x9B, 0xB2, 0x79, 0x3D, 0xBE, 0xAC, 0xAA, 0x63, 0x81, 0xC5, 0xC6, 0x22, 0x32, 0x70, 0x51, 0xC5, 0x30, 0xE6, 0x3A, 0x6B, 0xF0, 0xCF, 0x35, 0x3D, 0xA0, 0x24, 0xA7, 0xC4, 0x15, 0xA1, 0x78, 0x3B, 0xB1, 0xE0, 0xFE, 0x0C, 0xF5, 0x9B, 0xBD, 0xA1, 0x5B, 0x5F, 0xE8, 0xAF, 0x76, 0xB7, 0x11, 0x75, 0x12, 0xEF, 0x0A, 0xBF, 0xE9, 0xBF, 0xE2, 0x73, 0xED, 0x4A, 0xE5, 0x23, 0x82, 0xA4, 0xD0, 0x1C, 0x59, 0xCF, 0x8B, 0x24, 0xAB, 0xD8, 0x43, 0xFF, 0x30, 0x70, 0xFA, 0xB8, 0x38, 0x24, 0x5A, 0x50, 0x54, 0x13, 0xEB, 0x68, 0xDD, 0x98, 0xCC, 0xCB, 0x36, 0x65, 0x1A, 0x26, 0x8C, 0xB7, 0x7B, 0x3D, 0x5A, 0x75, 0xE2, 0xD3, 0x7F, 0x42, 0x91, 0xC1, 0xBD, 0x72, 0xFF, 0x7E, 0x18, 0xCC, 0x0D, 0x39, 0xE9, 0x2D, 0x7F, 0x46, 0x90, 0xF1, 0xBD, 0x0B, 0x09, 0x5D, 0xD0, 0x0D, 0xEF, 0xAD, 0x93, 0x52, 0xEB, 0x9A, 0x4B, 0x8D, 0x20, 0x27, 0xD8, 0xE1, 0xE6, 0x30, 0xFD, 0xE2, 0x08, 0xF3, 0x91, 0x61, 0x53, 0x55, 0xC8, 0x14, 0xAB, 0x19, 0x19, 0x4F, 0xF4, 0x05, 0xEA, 0xFE, 0x76, 0x48, 0xBA, 0xD2, 0xE6, 0x8B, 0x7A, 0xA2, 0x63, 0xE1, 0x3A, 0x10, 0xE4, 0x48, 0xEB, 0xA9, 0x3C, 0x61, 0x1E, 0x0C, 0x3D, 0x0E, 0x89, 0x2E, 0xCB, 0x83, 0xEC, 0x15, 0x8E, 0x9B, 0x4D, 0x9F, 0xB9, 0x22, 0xA2, 0x63, 0xAA, 0x59, 0x9F, 0x3E, 0x96, 0xEB, 0x4B, 0x4F, 0x71, 0x56, 0x15, 0xF2, 0xED, 0x5E, 0x7E, 0x10, 0x64, 0x66, 0x3C, 0xB8, 0x90, 0x7A, 0x76, 0x6E, 0x2F, 0x6B, 0x43, 0xAB, 0x49, 0x37, 0xBF, 0x42, 0x93, 0x4C, 0x61, 0x63, 0xF9, 0x92, 0x48, 0x2D, 0xEF, 0x73, 0x86, 0xCC, 0xAC, 0x44, 0x56, 0xC5, 0x53, 0x32, 0x17, 0x7E, 0x6F, 0x03, 0x0A, 0x6A, 0x7A, 0x68, 0x32, 0x83, 0xE8, 0xDD, 0x64, 0x96, 0x2C, 0x58, 0xB0, 0x12, 0xAC, 0x92, 0xCD, 0xFA, 0x86, 0x26, 0x69, 0xE3, 0xDF, 0xD8, 0xE9, 0x5A, 0x5C, 0xEF, 0x0E, 0xBE, 0x77, 0x22, 0xB5, 0xFE, 0xCA, 0x48, 0x67, 0x44, 0xD8, 0xBE, 0x44, 0xF2, 0x92, 0x9C, 0x60, 0x40, 0xFD, 0xE6, 0xC7, 0x80, 0x09, 0x6A, 0xCD, 0x16, 0x2E, 0xF7, 0x4B, 0x6A, 0x72, 0xE1, 0x96, 0x9B, 0xE4, 0x4E, 0x99, 0xD8, 0x7E, 0x37, 0x30, 0x6F, 0xB4, 0x07, 0x63, 0x1A, 0x2F, 0x9F, 0x29, 0xB6, 0x96, 0x08, 0x3A, 0x4C, 0x88, 0x97, 0x8B, 0x83, 0x9A, 0x0F, 0xF7, 0x0B, 0xCD, 0xF5, 0x69, 0x17, 0x69, 0x23, 0xC0, 0x50, 0x56, 0xC7, 0xA7, 0x66, 0x85, 0x68, 0x37, 0x32, 0xAE, 0x3A, 0x70, 0xB9, 0x80, 0xEF, 0x3C, 0x28, 0xF9, 0xFF, 0xC4, 0x17, 0xDA, 0x61, 0xB2, 0x35, 0x5D, 0xBE, 0x87, 0x7C, 0x0B, 0x9F, 0x9E, 0x8A, 0x26, 0x88, 0xA0, 0xB9, 0x2B, 0x90, 0x5E, 0x69, 0x50, 0xFE, 0x16, 0x78, 0x96, 0x12, 0xD8, 0xFE, 0x2B, 0xEA, 0xA1, 0xB3, 0x89, 0x20, 0x1F, 0xB2, 0x59, 0x3A, 0x6A, 0x25, 0x2E, 0xA5, 0xA7, 0x6B, 0x93, 0x5C, 0xC7, 0x91, 0x89, 0xCF, 0x99, 0xEC, 0x5A, 0xAF, 0xCB, 0x8D, 0xC6, 0x79, 0x75, 0x79, 0x32, 0x8A, 0xE0, 0x9A, 0x04, 0xCB, 0xB0, 0x57, 0xB8, 0x75, 0x81, 0xFB, 0x65, 0x1B, 0xFC, 0xB2, 0xA0, 0x9B, 0xCE, 0xD7, 0x5D, 0x1D, 0x06, 0xDB, 0x6C, 0x46, 0x55, 0x7C, 0xBC, 0x45, 0x15, 0x2D, 0xBF, 0xC8, 0x0D, 0xB7, 0x02, 0x33, 0x54, 0x16, 0x14, 0xE4, 0xE3, 0xE1, 0xDF, 0x86, 0x80, 0x7F, 0x4C, 0xE8, 0x8D, 0xA3, 0x97, 0x99, 0xBB, 0x2E, 0x7A, 0x69, 0x60, 0x12, 0x58, 0x71, 0xF4, 0x50, 0xD1, 0xB2, 0xB0, 0x2E, 0x63, 0x29, 0x3A, 0x63, 0x57, 0x09, 0x99, 0x1A, 0x98, 0x39, 0x54, 0x65, 0x94, 0x06, 0xD3, 0xC3, 0x31, 0x99, 0x04, 0xD8, 0xAB, 0x5A, 0x3F, 0xA4, 0xBB, 0xE2, 0x6E, 0x79, 0x70, 0x4D, 0x7A, 0x87, 0x1D, 0x70, 0x55, 0xB0, 0xA6, 0x65, 0x20, 0x44, 0x54, 0x8D, 0x14, 0x33, 0x78, 0x4D, 0x24, 0x0A, 0x67, 0xBB, 0xE9, 0x3E, 0xE7, 0xCA, 0x5E, 0x98, 0x26, 0x49, 0x11, 0x9F, 0xE0, 0x0B, 0xAB, 0x03, 0xD0, 0x0C, 0xD3, 0x38, 0xCA, 0xA0, 0xEF, 0xD9, 0x59, 0xAA, 0x1F, 0xA0, 0x72, 0x8C, 0xC9, 0xBA, 0x99, 0x9D, 0x6F, 0x6B, 0x42, 0x79, 0x3A, 0x9F, 0x3B, 0xBB, 0x9D, 0x22, 0x88, 0xD5, 0x01, 0x93, 0x2F, 0xC4, 0x23, 0x16, 0xD0, 0xA6, 0x35, 0xA3 };
        public static readonly byte[] Mr0kConstKey = new byte[] { 0xA1, 0xF2, 0x7E, 0xB3, 0x5E, 0xDC, 0x88, 0xC7, 0xB6, 0x6C, 0xD8, 0x76, 0xD6, 0x7B, 0xB2, 0x69 };

        public static readonly byte[] MarkKey = new byte[] { 0x71, 0x98, 0xAA, 0xE6, 0xCE, 0x1B, 0x05, 0x4A, 0xE9, 0xFF, 0x45, 0x21, 0xC3, 0x38, 0x5E, 0x3C, 0x0F, 0xFB, 0xF5, 0xBB, 0xF6, 0x81, 0x48, 0x15, 0xFA, 0xD7, 0x77, 0x35, 0x82, 0x17, 0xD9, 0x9D, 0x56, 0x28, 0x2E, 0xA9, 0x51, 0xBA, 0x66, 0x2F, 0x22, 0xDD, 0xBB, 0x8A, 0x3B, 0xAD, 0x90, 0x63, 0xC6, 0x64, 0xFB, 0xD6, 0xCF, 0xA8, 0xBC, 0x48, 0x02, 0xC3, 0xBE, 0x36, 0xB2, 0x93, 0xBC, 0xD9 };

        public static readonly byte[] ToTBlockKey = { 0x25, 0x7D, 0x02, 0x00, 0x41, 0xC8, 0x03, 0x00, 0x73, 0xA7, 0x05, 0x00, 0xBF, 0x44, 0x07, 0x00, 0xDD, 0x90, 0x08, 0x00, 0xDF, 0x69, 0x0A, 0x00 };

        private static int GF256Mul(int a, int b) => (a == 0 || b == 0) ? 0 : GF256Exp[(GF256Log[a] + GF256Log[b]) % 0xFF];
        private static void DescrambleChunk(byte[] input, int offset)
        {
            byte[] vector = new byte[0x10];
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 0x10; j++)
                {
                    int k = Mhy0ShiftRow[(2 - i) * 0x10 + j];
                    int idx = j % 8;
                    vector[j] = (byte)(Mhy0Key[idx] ^ GISBox[(j % 4 * 0x100) | GF256Mul(Mhy0Mul[idx], input[offset + k])]);
                }
                Buffer.BlockCopy(vector, 0, input, offset, 0x10);
            }
        }
        private static byte[] Descramble(byte[] input, ulong blockSize, ulong entrySize)
        {
            var roundedEntrySize = (int)((entrySize + 0xF) / 0x10 * 0x10);
            for (int i = 0; i < roundedEntrySize; i += 0x10)
                DescrambleChunk(input, i + 4);

            for (int i = 0; i < 4; i++)
                input[i] ^= input[i + 4];

            ulong currentEntry = (ulong)roundedEntrySize + 4;
            var finished = false;
            while (currentEntry < blockSize && !finished)
            {
                for (ulong i = 0; i < entrySize; i++)
                {
                    input[i + currentEntry] ^= input[i + 4];
                    if (i + currentEntry >= blockSize - 1)
                    {
                        finished = true;
                        break;
                    }
                }
                currentEntry += entrySize;
            }

            return input;
        }
        public static byte[] DescrambleHeader(byte[] input) => Descramble(input, 0x39, 0x1C);
        public static byte[] DescrambleEntry(byte[] input) => Descramble(input, (ulong)Math.Min(input.Length, 0x21), 8);
    }
}
